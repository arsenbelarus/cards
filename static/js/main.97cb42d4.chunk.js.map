{"version":3,"sources":["a1-main/m1-ui/routes/routerPathsEnum.ts","a1-main/m3-dal/login-api.ts","a1-main/m2-bll/reducers/profile_reducer.ts","a1-main/m2-bll/reducers/login_reducer.ts","a2-features/f1-auth/a1-login/LoginPage.tsx","a2-features/f1-auth/a2-registration/RegistrationPage.tsx","a2-features/f1-auth/a3-restorePassword/RestorePage.tsx","a2-features/f1-auth/a4-newPassword/NewPasswordPage.tsx","a2-features/f1-auth/a5-profile/ProfilePage.tsx","a2-features/f0-error404/Error404Page.tsx","a1-main/m1-ui/routes/routes.tsx","a1-main/m1-ui/Main.tsx","a1-main/m1-ui/common/navLink/NavLinkCommon.tsx","a1-main/m1-ui/NavBar.tsx","a1-main/m1-ui/App.tsx","serviceWorker.ts","a1-main/m2-bll/reducers/signup_reducer.ts","a1-main/m2-bll/reducers/passwordRestore_reducer.ts","a1-main/m2-bll/reducers/newPassword_reducer.ts","a1-main/m2-bll/store.ts","index.tsx","a1-main/m1-ui/common/navLink/NavLinkCommom.module.scss"],"names":["RouterPathEnum","instance","axios","create","baseURL","authAPI","data","post","token","delete","headers","xsrfCookieName","initialState","avatar","email","created","isAdmin","name","publicCardPacksCount","rememberMe","tokenDeathTime","updated","verified","setProfileAfterLoginAC","payload","type","isLoggedIn","appError","setIsLoggedInAC","LoginPage","useSelector","state","login","dispatch","useDispatch","formik","useFormik","initialValues","password","validate","values","errors","test","length","onSubmit","then","res","status","catch","err","error","response","message","alert","finally","to","PROFILE","Grid","container","justify","item","style","padding","backgroundColor","color","marginTop","borderRadius","textAlign","boxShadow","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","FormControlLabel","control","Checkbox","onChange","handleChange","checked","Button","variant","RegistrationPage","RestorePage","NewPasswordPage","ProfilePage","profileData","profile","LOGIN","onClick","src","alt","Error404Page","Routes","exact","path","render","NEW_PASSWORD","REGISTRATION","RESTORE_PASSWORD","Main","NavLinkCommon","linkText","className","styles","navLink","activeClassName","active","NavBar","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","registration","restorePassword","newPassword","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.97cb42d4.chunk.js","sourcesContent":["export enum RouterPathEnum {\r\n  LOGIN = '/login',\r\n  RESTORE_PASSWORD = '/password_restoration',\r\n  REGISTRATION = '/sign_up',\r\n  PROFILE = '/profile',\r\n  NEW_PASSWORD = '/new_password'\r\n}","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post(\"auth/login\", data)\r\n  },\r\n  logOut(token: string) {\r\n/*    axios.defaults.xsrfCookieName = token*/\r\n    return instance.delete(\"auth/me\", {\r\n      headers: {},\r\n      xsrfCookieName: token\r\n\r\n    })\r\n  },\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}\r\n\r\nexport type FormErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n  captcha?: string\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n  status: number\r\n  statusText: string\r\n  data: D\r\n}\r\n\r\nexport type LoginResponseType = {\r\n  avatar: string | undefined\r\n  created: Date | null\r\n  email: string | null\r\n  isAdmin: boolean | null\r\n  name: string | null\r\n  publicCardPacksCount: number | null\r\n  rememberMe: boolean | null\r\n  token: string\r\n  tokenDeathTime: number | null\r\n  updated: Date | null\r\n  verified: boolean | null\r\n}","import {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {LoginResponseType} from \"../../m3-dal/login-api\";\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof setProfileAfterLoginAC>\r\n\r\nconst initialState: LoginResponseType = {\r\n  avatar: \"\",\r\n  email: null,\r\n  created: null,\r\n  isAdmin: null,\r\n  name: null,\r\n  publicCardPacksCount: null,\r\n  rememberMe: null,\r\n  token: \"\",\r\n  tokenDeathTime: null,\r\n  updated: null,\r\n  verified: null\r\n}\r\n\r\nexport const profileReducer = (state: typeof initialState = initialState, action: ActionsType)  => {\r\n  debugger\r\n  switch (action.type) {\r\n    case 'SET-PROFILE':\r\n      return {...state, ...action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const setProfileAfterLoginAC = (payload: LoginResponseType) => ({type: 'SET-PROFILE', payload} as const)\r\nexport const setProfileAfterLogOutAC = (payload: LoginResponseType) => ({type: 'SET-PROFILE', payload} as const)\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../m3-dal/login-api\";\r\nimport {setProfileAfterLoginAC} from \"./profile_reducer\";\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof setIsLoggedInAC>\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  appError: \"\"\r\n}\r\n\r\nexport const loginReducer = (state: initialStateType = initialState, action: ActionsType)  => {\r\n  switch (action.type) {\r\n    case 'SET-IS-LOGGED-IN':\r\n      return {...state, isLoggedIn: action.isLoggedIn}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({type: 'SET-IS-LOGGED-IN', isLoggedIn} as const)\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n  debugger\r\n  //dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.status === 200) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setProfileAfterLoginAC(res.data))\r\n      } else {\r\n        //dispatch(setAppErrorAC(res.data.messages[0]))\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      const error = err.response ? err.response.data.error : err.message\r\n      alert(error)\r\n    })\r\n    .finally(/*() => {\r\n      dispatch(setAppStatusAC('idle'))\r\n    }*/)\r\n}\r\n\r\nexport const logOutTC = (token: string) => (dispatch: Dispatch) => {\r\n  debugger\r\n  //dispatch(setAppStatusAC('loading'))\r\n  authAPI.logOut(token)\r\n    .then(res => {\r\n      if (res.status === 200) {\r\n        const setProfileDataToDefault = () => {\r\n          return {\r\n            avatar: \"\",\r\n            email: null,\r\n            created: null,\r\n            isAdmin: null,\r\n            name: null,\r\n            publicCardPacksCount: null,\r\n            rememberMe: null,\r\n            token: \"\",\r\n            tokenDeathTime: null,\r\n            updated: null,\r\n            verified: null\r\n          }\r\n        }\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setProfileAfterLoginAC(setProfileDataToDefault()))\r\n      } else {\r\n        //dispatch(setAppErrorAC(res.data.messages[0]))\r\n      }\r\n    })\r\n    .catch(/*(error) => {\r\n      dispatch(setAppErrorAC(error.message))\r\n    }*/)\r\n    .finally(/*() => {\r\n      dispatch(setAppStatusAC('idle'))\r\n    }*/)\r\n}\r\n\r\n\r\n\r\n//types\r\n\r\nexport type initialStateType = {\r\n  isLoggedIn: boolean,\r\n  appError: string\r\n}\r\n\r\n","import React from \"react\";\r\nimport {AppRootStateType} from \"../../../a1-main/m2-bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {RouterPathEnum} from \"../../../a1-main/m1-ui/routes/routerPathsEnum\";\r\nimport {FormErrorType, LoginParamsType} from \"../../../a1-main/m3-dal/login-api\";\r\nimport {loginTC} from \"../../../a1-main/m2-bll/reducers/login_reducer\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  Grid,\r\n  TextField\r\n} from \"@material-ui/core\";\r\n\r\n\r\nexport const LoginPage = () => {\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  const validate = (values: LoginParamsType) => {\r\n    const errors: FormErrorType = {};\r\n    if (!values.email) {\r\n      errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n      errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'Required'\r\n    } else if (values.password.length < 4) {\r\n      errors.password = 'Must be at least 4 characters long'\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate,\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values));\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={RouterPathEnum.PROFILE}/>\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item style={{padding: \"20px\", backgroundColor: \"#efc700\", color: \"ivory\", marginTop: \"40px\",\r\n        borderRadius: \"10px\", textAlign: \"center\", boxShadow: \"0 0 5px 1px lightgrey\"}}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"email\")}\r\n              />\r\n              {formik.errors.email ? <div style={{color: \"#282c34\"}}> {formik.errors.email} </div> : null}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"password\")}\r\n              />\r\n              {formik.errors.password ? <div style={{color: \"#282c34\"}}> {formik.errors.password} </div> : null}\r\n              <FormControlLabel\r\n                label={'Remember me'}\r\n                control={<Checkbox onChange={formik.handleChange}\r\n                                   checked={formik.values.rememberMe}\r\n                                   name=\"rememberMe\"/>}\r\n              />\r\n              <Button type={'submit'} variant={'contained'} color={'primary'} style={{backgroundColor: \"#282c34\"}}>Login</Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const RegistrationPage = () => {\r\n  return (\r\n    <div>\r\n      Registration page\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const RestorePage = () => {\r\n  return (\r\n    <div>\r\n      Restore page\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const NewPasswordPage = () => {\r\n  return (\r\n    <div>\r\n      New Password page\r\n    </div>\r\n  )\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../a1-main/m2-bll/store\";\r\nimport {LoginResponseType} from \"../../../a1-main/m3-dal/login-api\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {logOutTC} from \"../../../a1-main/m2-bll/reducers/login_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RouterPathEnum} from \"../../../a1-main/m1-ui/routes/routerPathsEnum\";\r\n\r\n\r\nexport const ProfilePage = () => {\r\n  debugger\r\n  const profileData = useSelector<AppRootStateType, LoginResponseType>(state => state.profile)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={RouterPathEnum.LOGIN}/>\r\n  }\r\n\r\n  const onLogOut = () => {\r\n    dispatch(logOutTC(profileData.token))\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Profile page</h1>\r\n      <Button onClick={onLogOut}> Log Out </Button>\r\n      <div> {profileData.name} </div>\r\n      <div> {profileData.email} </div>\r\n      <div><img src={profileData.avatar} alt=\"\"/> {} </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const Error404Page = () => {\r\n  return (\r\n    <div>\r\n      404 page\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport {RouterPathEnum} from \"./routerPathsEnum\";\r\nimport {LoginPage} from \"../../../a2-features/f1-auth/a1-login/LoginPage\";\r\nimport {RegistrationPage} from \"../../../a2-features/f1-auth/a2-registration/RegistrationPage\";\r\nimport {RestorePage} from \"../../../a2-features/f1-auth/a3-restorePassword/RestorePage\";\r\nimport {NewPasswordPage} from \"../../../a2-features/f1-auth/a4-newPassword/NewPasswordPage\";\r\nimport {ProfilePage} from \"../../../a2-features/f1-auth/a5-profile/ProfilePage\";\r\nimport {Error404Page} from \"../../../a2-features/f0-error404/Error404Page\";\r\n\r\nexport const Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path={'/'} render={() => <Redirect to={RouterPathEnum.PROFILE}/>}/>\r\n      <Route exact path={RouterPathEnum.LOGIN} render={() => <LoginPage />}/>\r\n      <Route exact path={RouterPathEnum.NEW_PASSWORD} render={() => <NewPasswordPage />}/>\r\n      <Route exact path={RouterPathEnum.REGISTRATION} render={() => <RegistrationPage />}/>\r\n      <Route exact path={RouterPathEnum.RESTORE_PASSWORD} render={() => <RestorePage />}/>\r\n      <Route exact path={RouterPathEnum.PROFILE} render={() => <ProfilePage />}/>\r\n      <Route path={'*'} render={() => <Error404Page />}/>\r\n    </Switch>\r\n  )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Routes} from \"./routes/routes\";\r\n\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <Routes />\r\n  )\r\n}","import React, {FC} from \"react\";\r\nimport styles from \"./NavLinkCommom.module.scss\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ninterface NavLinkPropsType {\r\n  to: string,\r\n  linkText: string,\r\n}\r\n\r\nexport const NavLinkCommon: FC<NavLinkPropsType> = ({to, linkText}) => {\r\n    return (\r\n        <>\r\n          <NavLink to={to} className={styles.navLink} activeClassName={styles.active}> {linkText} </NavLink>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {RouterPathEnum} from \"./routes/routerPathsEnum\";\r\nimport {NavLinkCommon} from \"./common/navLink/NavLinkCommon\";\r\n\r\n\r\nexport const NavBar = () => {\r\n  return (\r\n    <div>\r\n      <NavLinkCommon to={RouterPathEnum.LOGIN} linkText={'Log In'}/>\r\n      <NavLinkCommon to={RouterPathEnum.REGISTRATION} linkText={'Sign Up'}/>\r\n      <NavLinkCommon to={RouterPathEnum.RESTORE_PASSWORD} linkText={'Forgot Password'}/>\r\n      <NavLinkCommon to={RouterPathEnum.NEW_PASSWORD} linkText={'New Password'}/>\r\n      <NavLinkCommon to={RouterPathEnum.PROFILE} linkText={'Profile'}/>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport {Main} from \"./Main\";\nimport {NavBar} from \"./NavBar\";\n\nconst App = () => {\n    return (\n        <div>\n            <HashRouter>\n              <NavBar/>\n              <Main/>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof fakeAC>\r\n\r\nconst initialState = {}\r\n\r\nexport const signupReducer = (state = initialState, action: ActionsType)  => {\r\n  switch (action.type) {\r\n    case 'FAKE':\r\n      return {...state}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fakeAC = () => ({type: 'FAKE'} as const)\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof fakeAC>\r\n\r\nconst initialState = {}\r\n\r\nexport const passwordRestoreReducer = (state = initialState, action: ActionsType)  => {\r\n  switch (action.type) {\r\n    case 'FAKE':\r\n      return {...state}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fakeAC = () => ({type: 'FAKE'} as const)\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof fakeAC>\r\n\r\nconst initialState = {}\r\n\r\nexport const newPasswordReducer = (state = initialState, action: ActionsType)  => {\r\n  switch (action.type) {\r\n    case 'FAKE':\r\n      return {...state}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fakeAC = () => ({type: 'FAKE'} as const)\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {loginReducer} from \"./reducers/login_reducer\";\r\nimport {signupReducer} from \"./reducers/signup_reducer\";\r\nimport {passwordRestoreReducer} from \"./reducers/passwordRestore_reducer\";\r\nimport {newPasswordReducer} from \"./reducers/newPassword_reducer\";\r\nimport {profileReducer} from \"./reducers/profile_reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  login: loginReducer,\r\n  registration: signupReducer,\r\n  restorePassword: passwordRestoreReducer,\r\n  newPassword: newPasswordReducer,\r\n  profile: profileReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './a1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./a1-main/m2-bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"NavLinkCommom_navLink__26ksW\",\"active\":\"NavLinkCommom_active__1HGZ7\"};"],"sourceRoot":""}